{"version":3,"sources":["parse.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Type","type","args","raw","this","i","string","toString","hash","length","charCodeAt","getColor","hue","hashCode","isTuple","map","x","getShortName","join","ParseResults","types","roots","flat","toProcess","slice","next","shift","push","apply","parse","str","startIdx","indexOf","endIdx","lastIndexOf","substring","len","result","finished","current","finishChild","top","pop","startChild","char","endsWith","console","warn","concat","FlatTypes","Object","values","sort","a","b","as","bs","key","DisplayType","TypeExplorer","expand","useState","folded","setFolded","shortName","className","style","backgroundColor","href","onClick","display","App","input","setInput","error","setError","setResult","onChange","ev","val","res","dir","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAAaA,EAAb,iDACSC,KAAe,GADxB,KAESC,KAAe,GAFxB,KAGUC,IAAc,GAHxB,sDAMI,MAAqB,KAAdC,KAAKH,OANhB,iCAUI,IACcI,EADRC,EAASF,KAAKG,WAChBC,EAAO,EACX,GAAsB,IAAlBF,EAAOG,OAAc,OAAOD,EAChC,IAAKH,EAAI,EAAGA,EAAIC,EAAOG,OAAQJ,IAE7BG,GAAUA,GAAQ,GAAKA,EADfF,EAAOI,WAAWL,GAE1BG,GAAQ,EAEV,OAAOA,IAlBX,iCAsBI,GAAyB,IAArBJ,KAAKF,KAAKO,QAA6C,IAA7BL,KAAKF,KAAK,GAAGA,KAAKO,OAC9C,OAAOL,KAAKF,KAAK,GAAGS,WAGtB,IAAMC,EAAMR,KAAKS,WAAa,IAC9B,MAAM,OAAN,OAAcD,EAAd,iBA3BJ,qCAgCI,OAAIR,KAAKU,UACD,IAAN,OAAWV,KAAKF,KAAKa,KAAI,SAAAC,GAAC,OAAIA,EAAEC,kBAAgBC,KAAK,MAArD,KAGuB,IAArBd,KAAKF,KAAKO,OACLL,KAAKH,KAGW,IAArBG,KAAKF,KAAKO,OACN,GAAN,OAAUL,KAAKH,KAAf,YAAuBG,KAAKF,KAAK,GAAGe,eAApC,KAGI,GAAN,OAAUb,KAAKH,KAAf,WA5CJ,iCAiDI,OAAIG,KAAKD,IACAC,KAAKD,IAIVC,KAAKU,WACPV,KAAKD,IAAL,WAAeC,KAAKF,KAAKa,KAAI,SAAAC,GAAC,OAAIA,EAAET,cAAYW,KAAK,MAArD,KACOd,KAAKD,KAIW,IAArBC,KAAKF,KAAKO,OACLL,KAAKH,MAIdG,KAAKD,IAAL,UAAcC,KAAKH,KAAnB,YAA2BG,KAAKF,KAAKa,KAAI,SAAAC,GAAC,OAAIA,EAAET,cAAYW,KAAK,MAAjE,KACOd,KAAKD,SAlEhB,KAsEagB,EAMX,WAAYC,GAAgB,yBALrBC,WAKoB,OAJpBC,UAIoB,EACzBlB,KAAKiB,MAAQD,EACbhB,KAAKkB,KAAO,GAKZ,IAFA,IAAMC,EAAYH,EAAMI,QACpBC,EAAOF,EAAUG,QACdD,GACHrB,KAAKkB,KAAKG,EAAKlB,YAAckB,EAC7BF,EAAUI,KAAKC,MAAML,EAAWE,EAAKvB,MACrCuB,EAAOF,EAAUG,SAKlB,SAASG,EAAMC,GAEpB,IAAMC,EAAWD,EAAIE,QAAQ,KACvBC,EAASH,EAAII,YAAY,KAEzBjC,EAAO6B,EAAIK,UAAUJ,EAAW,EAAGE,GACnCG,EAAMnC,EAAKQ,OAGX4B,EAAS,IAAIrC,EACbsC,EAAmB,GACnBC,EAAU,CAACF,GAEjB,SAASG,IACL,IAAMC,EAAMF,EAAQG,MACfD,IAIDF,EAAQ9B,OAAS,EACnB8B,EAAQA,EAAQ9B,OAAS,GAAGP,KAAKyB,KAAKc,GAEtCH,EAASX,KAAKc,IAIpB,SAASE,IACPJ,EAAQZ,KAAK,IAAI3B,GAGnB,IAAK,IAAIK,EAAI,EAAGA,EAAI+B,EAAK/B,GAAK,EAAG,CAC/B,IAAMuC,EAAO3C,EAAKI,GAGlB,GAAa,MAATuC,GAAgC,MAAhB3C,EAAKI,EAAI,GAA7B,CAOA,GAAa,MAATuC,GAAyB,OAATA,EAGlB,KADcL,EAAQ9B,QAAU8B,EAAQA,EAAQ9B,OAAS,GAAGR,KAAK4C,SAAS,QAExE,SAKS,MAATD,EAOS,MAATA,EAIS,MAATA,EAMS,MAATA,EAIS,MAATA,EAKmB,IAAnBL,EAAQ9B,OACVqC,QAAQC,KAAR,oBAA0BH,IAE1BL,EAAQA,EAAQ9B,OAAS,GAAGR,MAAQ2C,EAPpCJ,IAJAG,IANAH,IAJAG,KAPAH,IACAG,UAjBAH,IACAG,IA+CJ,OAAO,IAAIxB,EAAamB,EAASU,OAAOT,IC3H1C,SAASU,EAAT,GAAgE,IAA3C3B,EAA0C,EAA1CA,KACbF,EAAQ8B,OAAOC,OAAO7B,GAa5B,OAZAF,EAAMgC,MAAK,SAACC,EAAGC,GACb,IAAMC,EAAKF,EAAE9C,WACPiD,EAAKF,EAAE/C,WACb,OAAIgD,EAAKC,GACC,EAEND,EAAKC,EACA,EAEF,KAIP,oCACE,yCACA,4BAEEpC,EAAML,KAAI,SAAAd,GAAI,OACZ,wBAAIwD,IAAKxD,EAAKM,YACZ,kBAACmD,EAAD,CAAazD,KAAMA,UAS/B,SAAS0D,EAAT,GAAqD,IAA7BtC,EAA4B,EAA5BA,MACtB,OACE,4BAEIA,EAAMN,KAAI,SAAAd,GAAI,OACZ,wBAAIwD,IAAKxD,EAAKM,YACZ,kBAACmD,EAAD,CAAazD,KAAMA,EAAM2D,QAAQ,SAQ7C,SAASF,EAAT,GAA0E,IAAnDzD,EAAkD,EAAlDA,KAAM2D,EAA4C,EAA5CA,OAA4C,EAC3CC,qBAAS5D,EAAKa,YAAoB8C,GADS,mBAChEE,EADgE,KACxDC,EADwD,KAEjEC,EAAY/D,EAAKgB,eAEvB,OAAyB,IAArBhB,EAAKC,KAAKO,OAEV,yBACEwD,UAAU,QAEV,0BACEC,MAAO,CAACC,gBAAiBlE,EAAKU,aAC7BqD,IAMP,yBACEC,UAAU,QAEV,uBACEG,KAAK,IACLC,QAnBe,kBAAMN,GAAWD,IAoBhCI,MAAO,CAACC,gBAAiBlE,EAAKU,aAC7BqD,GAEH,wBAAIE,MAAO,CAACI,QAASR,EAAS,OAAS,UAEnC7D,EAAKC,KAAKa,KAAI,SAAAd,GAAI,OAChB,wBAAIwD,IAAKxD,EAAKM,YAAY,kBAACmD,EAAD,CAAazD,KAAMA,EAAM2D,OAAQA,UAQxDW,MA1HO,WAAO,IAAD,EACAV,mBANf,+4CAKe,mBACnBW,EADmB,KACZC,EADY,OAEAZ,mBAAS,IAFT,mBAEnBa,EAFmB,KAEZC,EAFY,OAGEd,mBAAShC,EAAM2C,IAHjB,mBAGnBnC,EAHmB,KAGXuC,EAHW,KAkB1B,OACE,yBAAKX,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACb,8BACEY,SAAU,SAAAC,GAAE,OAlBtB,SAAkBC,GAChBN,EAASM,GACT,IACE,IAAMC,EAAMnD,EAAMkD,GAClBjC,QAAQmC,IAAID,GACZL,EAAS,IACTC,EAAUI,GACV,MAAOE,GACPpC,QAAQ4B,MAAMQ,GACdP,EAASO,EAAE3E,aASWsE,CAASC,EAAGK,OAAOC,QACnCA,MAAOZ,KAGX,yBAAKP,UAAU,SACXS,GAAS,wBAAIT,UAAU,SAASS,IAC/BA,GAAS,kBAACzB,EAAD,CAAW3B,KAAMe,EAAOf,SAGxC,yBAAK2C,UAAU,UACb,yBAAKA,UAAU,UACVS,GAAS,kBAACf,EAAD,CAActC,MAAOgB,EAAOhB,YChC9BgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5e4f970.chunk.js","sourcesContent":["export class Type {\n  public type: string = '';\n  public args: Type[] = [];\n  private raw: string = '';\n\n  public isTuple(): boolean {\n    return this.type === ''\n  }\n\n  public hashCode(): number {\n    const string = this.toString();\n    let hash = 0, i, chr;\n    if (string.length === 0) return hash;\n    for (i = 0; i < string.length; i++) {\n      chr   = string.charCodeAt(i);\n      hash  = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n    return hash;\n  }\n\n  public getColor(): string {\n    if (this.args.length === 1 && this.args[0].args.length !== 0) {\n      return this.args[0].getColor();\n    }\n      \n    const hue = this.hashCode() % 360;\n    return `hsl(${hue}, 45%, 85%)`;\n  }\n\n  public getShortName(): string {\n    // a tuple\n    if (this.isTuple()) {\n      return `(${this.args.map(x => x.getShortName()).join(', ')})`;\n    }\n\n    if (this.args.length === 0) {\n      return this.type;\n    }\n\n    if (this.args.length === 1) {\n      return `${this.type}<${this.args[0].getShortName()}>`;\n    }\n\n    return `${this.type}<...>`;\n  }\n\n  public toString(): string {\n    // memoized toString\n    if (this.raw) {\n      return this.raw;\n    }\n\n    // a tuple\n    if (this.isTuple()) {\n      this.raw = `(${this.args.map(x => x.toString()).join(', ')})`;\n      return this.raw;\n    }\n\n    // regular type\n    if (this.args.length === 0) {\n      return this.type;\n    }\n\n    // generic type\n    this.raw = `${this.type}<${this.args.map(x => x.toString()).join(', ')}>`;\n    return this.raw;\n  }\n}\n\nexport class ParseResults {\n  public roots: Type[];\n  public flat: { \n    [key:string]: Type\n  };\n  \n  constructor(types: Type[]) {\n    this.roots = types;\n    this.flat = {};\n\n    // we need to deduplicate all the types and construct flat versions\n    const toProcess = types.slice();\n    let next = toProcess.shift();\n    while (next) {\n        this.flat[next.toString()] = next;\n        toProcess.push.apply(toProcess, next.args);\n        next = toProcess.shift();\n    }\n  }\n}\n\nexport function parse(str: string): ParseResults {\n  // first extract the type (between ``)\n  const startIdx = str.indexOf('`')\n  const endIdx = str.lastIndexOf('`')\n\n  const type = str.substring(startIdx + 1, endIdx)\n  const len = type.length\n\n  // do parse\n  const result = new Type();\n  const finished: Type[] = [];\n  const current = [result];\n\n  function finishChild() {\n      const top = current.pop();\n      if (!top) {\n        return;\n      }\n\n      if (current.length > 0) {\n        current[current.length - 1].args.push(top);\n      } else {\n        finished.push(top)\n      }\n  }\n\n  function startChild() {\n    current.push(new Type());\n  }\n\n  for (let i = 0; i < len; i += 1) {\n    const char = type[i];\n\n    /// Bound parsing.\n    if (char === ':' && type[i + 1] === ' ') {\n      finishChild();\n      startChild();\n      continue;\n    }\n\n    // ignore spaces too\n    if (char === ' ' || char === '\\n') {\n      // special case dyn types\n      const isDyn = current.length && current[current.length - 1].type.endsWith('dyn');\n      if (!isDyn) {\n        continue;\n      }\n    }\n\n    /// start parsing the next child\n    if (char === ',') {\n      finishChild()\n      startChild();\n      continue;\n    }\n\n    // generic braces\n    if (char === '<') {\n      startChild();\n      continue;\n    }\n    if (char === '>') {\n      finishChild();\n      continue;\n    }\n\n    // tuples\n    if (char === '(') {\n      startChild();\n      continue;\n    }\n    if (char === ')') {\n      finishChild();\n      continue;\n    }\n\n    if (current.length === 0) {\n      console.warn(`Ignoring: ${char}`)\n    } else {\n      current[current.length - 1].type += char;\n    }\n  }\n\n  return new ParseResults(finished.concat(current));\n}\n","import React, {useState} from 'react';\nimport './App.css';\n\nimport { parse, Type } from './parse';\n\nconst example = `\nerror[E0277]: the trait bound \\`&alloc::sync::Arc<sc_client::client::Client<sc_client_db::Backend<sp_runtime::generic::block::Block<sp_runtime::generic::header::Header<u32, sp_runtime::traits::BlakeTwo256>, sp_runtime::OpaqueExtrinsic>>, sc_client::call_executor::LocalCallExecutor<sc_client_db::Backend<sp_runtime::generic::block::Block<sp_runtime::generic::header::Header<u32, sp_runtime::traits::BlakeTwo256>, sp_runtime::OpaqueExtrinsic>>, sc_executor::native_executor::NativeExecutor<node_executor::Executor>>, sp_runtime::generic::block::Block<sp_runtime::generic::header::Header<u32,\nsp_runtime::traits::BlakeTwo256>, sp_runtime::OpaqueExtrinsic>, node_runtime::RuntimeApi>>: sp_blockchain::backend::HeaderBackend<sp_runtime::generic::block::Block<sp_runtime::generic::header::Header<u32, sp_runtime::traits::BlakeTwo256>, sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic<pallet_indices::address::Address<sp_core::crypto::AccountId32, u32>, node_runtime::Call, sp_runtime::MultiSignature, (frame_system::CheckVersion<node_runtime::Runtime>, frame_system::CheckGenesis<node_runtime::Runtime>, frame_system::CheckEra<node_runtime::Runtime>, frame_system::CheckNonce<node_runtime::Runtime>, frame_system::CheckWeight<node_runtime::Runtime>, pallet_transaction_payment::ChargeTransactionPayment<node_runtime::Runtime>, pallet_contracts::CheckBlockGasLimit<node_runtime::Runtime>)>>>\\` is not satisfied\n`;\n\nconst App: React.FC = () => {\n  const [input, setInput] = useState(example);\n  const [error, setError] = useState('');\n  const [result, setResult] = useState(parse(input));\n\n  function onChange(val: string) {\n    setInput(val);\n    try {\n      const res = parse(val);\n      console.dir(res);\n      setError('');\n      setResult(res);\n    } catch (e) {\n      console.error(e);\n      setError(e.toString());\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"input\">\n        <div className=\"block\">\n          <textarea\n            onChange={ev => onChange(ev.target.value)}\n            value={input}\n          />\n        </div>\n        <div className=\"block\">\n          { error && <h1 className=\"error\">{error}</h1> }\n          { !error && <FlatTypes flat={result.flat} /> }\n        </div>\n      </div>\n      <div className=\"output\">\n        <div className=\"block\">\n          { !error && <TypeExplorer roots={result.roots} /> }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction FlatTypes({ flat }: { flat: { [key:string]: Type } }) {\n  const types = Object.values(flat);\n  types.sort((a, b) => {\n    const as = a.toString();\n    const bs = b.toString();\n    if (as < bs) {\n      return -1;\n    }\n    if (as > bs) {\n      return 1;\n    } \n    return 0;\n  });\n\n  return (\n    <>\n      <h3>All types</h3>\n      <ul>\n      {\n        types.map(type => (\n          <li key={type.toString()}>\n            <DisplayType type={type} />\n          </li>\n        ))\n      }\n      </ul>\n    </>\n  );\n}\n\nfunction TypeExplorer({ roots }: { roots: Type[] }) {\n  return (\n    <ul>\n      {\n        roots.map(type => (\n          <li key={type.toString()}>\n            <DisplayType type={type} expand={true} />\n          </li>\n        ))\n      }\n    </ul>\n  );\n}\n\nfunction DisplayType({ type, expand }: { type: Type, expand?: boolean }) {\n  const [folded, setFolded] = useState(type.isTuple() ? true : !expand);\n  const shortName = type.getShortName();\n  const toggleFolded = () => setFolded(!folded);\n  if (type.args.length === 0) {\n    return (\n      <div\n        className=\"type\"\n      >\n        <span\n          style={{backgroundColor: type.getColor()}}\n        >{ shortName }</span>\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className=\"type\"\n    >\n      <a \n        href=\"#\"\n        onClick={toggleFolded}\n        style={{backgroundColor: type.getColor()}}\n      >{ shortName }</a>\n\n      <ul style={{display: folded ? 'none' : 'block' }}>\n        {\n          type.args.map(type => (\n            <li key={type.toString()}><DisplayType type={type} expand={expand} /></li>\n          ))\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}